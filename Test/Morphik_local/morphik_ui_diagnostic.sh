#!/bin/bash

# Morphik UI Diagnostic Script
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI –∏ –≤—ã—è–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã

echo "üîç Morphik UI Diagnostic Tool"
echo "=============================="
echo ""

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# 1. Check Docker containers
echo "1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
echo "--------------------------------"
docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}" | grep -E "ui|morphik|worker" || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
echo ""

# 2. Check UI version in package.json
echo "2Ô∏è‚É£ –í–µ—Ä—Å–∏—è UI –≤ package.json:"
echo "-----------------------------"
if [ -f "ee/ui-component/package.json" ]; then
    version=$(grep '"version"' ee/ui-component/package.json | head -1 | cut -d'"' -f4)
    echo -e "${GREEN}–í–µ—Ä—Å–∏—è: $version${NC}"
    if [ "$version" = "0.4.7" ]; then
        echo -e "${GREEN}‚úÖ –í–µ—Ä—Å–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π (0.4.7)${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è –í–µ—Ä—Å–∏—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π (–æ–∂–∏–¥–∞–µ—Ç—Å—è 0.4.7)${NC}"
    fi
else
    echo -e "${RED}‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
fi
echo ""

# 3. Check Next.js version
echo "3Ô∏è‚É£ –í–µ—Ä—Å–∏—è Next.js:"
echo "------------------"
if [ -f "ee/ui-component/package.json" ]; then
    nextjs=$(grep '"next"' ee/ui-component/package.json | head -1 | cut -d'"' -f4)
    echo -e "${GREEN}Next.js: $nextjs${NC}"
else
    echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é Next.js${NC}"
fi
echo ""

# 4. Check Docker image age
echo "4Ô∏è‚É£ –í–æ–∑—Ä–∞—Å—Ç Docker –æ–±—Ä–∞–∑–æ–≤:"
echo "---------------------------"
docker images | grep -E "ui|morphik" | head -5
echo ""

# 5. Check if UI is accessible
echo "5Ô∏è‚É£ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å UI:"
echo "------------------"
for port in 3000 3001; do
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:$port | grep -q "200\|301\|302"; then
        echo -e "${GREEN}‚úÖ UI –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É $port${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è UI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É $port${NC}"
    fi
done
echo ""

# 6. Check git status
echo "6Ô∏è‚É£ Git —Å—Ç–∞—Ç—É—Å:"
echo "--------------"
git log --oneline -5
echo ""
current_branch=$(git branch --show-current)
echo "–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: $current_branch"
echo ""

# 7. Check docker-compose file
echo "7Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π docker-compose:"
echo "--------------------------------"
if [ -f "docker-compose.local.yml" ]; then
    echo -e "${GREEN}‚úÖ docker-compose.local.yml –Ω–∞–π–¥–µ–Ω${NC}"
    grep -A 2 "ui:" docker-compose.local.yml | head -5
else
    echo -e "${RED}‚ùå docker-compose.local.yml –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
fi
echo ""

# 8. Check node_modules
echo "8Ô∏è‚É£ –°–æ—Å—Ç–æ—è–Ω–∏–µ node_modules:"
echo "---------------------------"
if [ -d "ee/ui-component/node_modules" ]; then
    count=$(ls ee/ui-component/node_modules | wc -l)
    echo -e "${GREEN}‚úÖ node_modules —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ($count –ø–∞–∫–µ—Ç–æ–≤)${NC}"
    # Check specific packages
    for pkg in "next" "react" "react-dom"; do
        if [ -d "ee/ui-component/node_modules/$pkg" ]; then
            echo "  ‚úÖ $pkg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        else
            echo "  ‚ùå $pkg –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        fi
    done
else
    echo -e "${RED}‚ùå node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
fi
echo ""

# Summary
echo "üìä –ò–¢–û–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:"
echo "========================"

problems=0

# Check if UI container is running
if docker ps | grep -q "ui"; then
    echo -e "${GREEN}‚úÖ UI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω${NC}"
else
    echo -e "${RED}‚ùå UI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ù–ï –∑–∞–ø—É—â–µ–Ω${NC}"
    problems=$((problems + 1))
fi

# Check if version is correct
if [ "$version" = "0.4.7" ]; then
    echo -e "${GREEN}‚úÖ –í–µ—Ä—Å–∏—è UI –∞–∫—Ç—É–∞–ª—å–Ω–∞—è${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è –í–µ—Ä—Å–∏—è UI —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è${NC}"
    problems=$((problems + 1))
fi

# Check if UI is accessible
if curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 | grep -q "200\|301\|302"; then
    echo -e "${GREEN}‚úÖ UI –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä${NC}"
else
    echo -e "${RED}‚ùå UI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä${NC}"
    problems=$((problems + 1))
fi

echo ""
if [ $problems -eq 0 ]; then
    echo -e "${GREEN}üéâ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: $problems${NC}"
    echo "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å: ./force_update_ui.sh"
fi