#!/bin/bash

# Force Update UI Script
# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç UI –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏

echo "üöÄ Morphik UI Force Update Tool"
echo "================================"
echo ""

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Step 1: Stop current containers
echo -e "${YELLOW}–®–∞–≥ 1: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
docker-compose -f docker-compose.local.yml down || docker-compose down
echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
echo ""

# Step 2: Remove old UI images
echo -e "${YELLOW}–®–∞–≥ 2: –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤ UI...${NC}"
docker images | grep ui | awk '{print $3}' | xargs -r docker rmi -f 2>/dev/null || true
echo -e "${GREEN}‚úÖ –°—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã${NC}"
echo ""

# Step 3: Clean Docker cache
echo -e "${YELLOW}–®–∞–≥ 3: –û—á–∏—Å—Ç–∫–∞ Docker –∫—ç—à–∞...${NC}"
docker builder prune -f
echo -e "${GREEN}‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω${NC}"
echo ""

# Step 4: Update dependencies
echo -e "${YELLOW}–®–∞–≥ 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"
cd ee/ui-component
rm -rf node_modules package-lock.json .next
npm cache clean --force
npm install
echo -e "${GREEN}‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã${NC}"
cd ../..
echo ""

# Step 5: Build UI without cache
echo -e "${YELLOW}–®–∞–≥ 5: –°–±–æ—Ä–∫–∞ UI –±–µ–∑ –∫—ç—à–∞...${NC}"
docker-compose -f docker-compose.local.yml build ui --no-cache
echo -e "${GREEN}‚úÖ UI —Å–æ–±—Ä–∞–Ω –∑–∞–Ω–æ–≤–æ${NC}"
echo ""

# Step 6: Start containers
echo -e "${YELLOW}–®–∞–≥ 6: –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
docker-compose -f docker-compose.local.yml up -d
echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã${NC}"
echo ""

# Step 7: Wait for services to be ready
echo -e "${YELLOW}–®–∞–≥ 7: –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
sleep 10

# Step 8: Verify services
echo -e "${YELLOW}–®–∞–≥ 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
echo ""

# Check containers
echo "–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
docker ps --format "table {{.Names}}\t{{.Status}}" | grep morphik
echo ""

# Check UI version
echo "–í–µ—Ä—Å–∏—è UI:"
grep '"version"' ee/ui-component/package.json | head -1
echo ""

# Check accessibility
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:"
for port in 3000 8000; do
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:$port | grep -q "200\|301\|302"; then
        echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å –Ω–∞ –ø–æ—Ä—Ç—É $port –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
    else
        echo -e "${RED}‚ùå –°–µ—Ä–≤–∏—Å –Ω–∞ –ø–æ—Ä—Ç—É $port –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
    fi
done
echo ""

# Final message
echo "================================"
echo -e "${GREEN}üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${NC}"
echo ""
echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ UI –ø–æ –∞–¥—Ä–µ—Å—É:"
echo "  http://localhost:3000"
echo ""
echo "API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:"
echo "  http://localhost:8000/docs"
echo ""
echo "–õ–æ–≥–∏–Ω –¥–ª—è –≤—Ö–æ–¥–∞:"
echo "  Email: test@example.com"
echo "  Password: testpassword123"
echo ""
echo "–ï—Å–ª–∏ UI –≤—Å–µ –µ—â–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é:"
echo "1. –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞ (Ctrl+Shift+R)"
echo "2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º/–∏–Ω–∫–æ–≥–Ω–∏—Ç–æ —Ä–µ–∂–∏–º–µ"
echo "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs ui -f"